import axios from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { 
  LoginPayload, 
  LoginResponse, 
  StaffLoginPayload, 
  WorkingPositionResponse, 
  DepartmentResponse,
  StaffDetailsResponse
} from '../types';
import { 
  VITE_API_SECRET, 
  VITE_LOGIN_RESIDENT, 
  VITE_LOGIN_STAFF, 
  VITE_CURRENT_USER_API,
  VITE_POSITION_STAFF,
  VITE_DEPARTMENT_STAFF,
  VITE_GET_STAFF_INFORMATION,
  VITE_POST_CHATBOT,
  VITE_GET_CHATBOT,
  VITE_GET_HISTORY_CRACK
} from '@env';

// T·∫°o instance axios v·ªõi baseURL t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const instance = axios.create({
  baseURL: VITE_API_SECRET,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Th√™m interceptor ƒë·ªÉ t·ª± ƒë·ªông th√™m token v√†o header
instance.interceptors.request.use(
  async (config) => {
    const token = await AsyncStorage.getItem('accessToken');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Th√™m interceptor response ƒë·ªÉ x·ª≠ l√Ω token h·∫øt h·∫°n
instance.interceptors.response.use(
  (response) => response,
  async (error) => {
    const originalRequest = error.config;

    // N·∫øu l·ªói do token h·∫øt h·∫°n
    if (error.response?.status === 401 && !originalRequest._retry) {
      originalRequest._retry = true;

      try {
        // X√≥a to√†n b·ªô th√¥ng tin ƒëƒÉng nh·∫≠p
        await AsyncStorage.multiRemove([
          'accessToken', 
          'refreshToken', 
          'userId', 
          'username', 
          'userData'
        ]);

        // C√≥ th·ªÉ th√™m logic refresh token ·ªü ƒë√¢y n·∫øu c·∫ßn
      } catch (storageError) {
        console.error('L·ªói x√≥a token:', storageError);
      }
    }

    return Promise.reject(error);
  }
);

export const AuthService = {
  async loginResident(payload: LoginPayload): Promise<LoginResponse | null> {
    try {
      const response = await instance.post<LoginResponse>(VITE_LOGIN_RESIDENT, payload);
      
      // L∆∞u token v√†o AsyncStorage
      if (response.data.accessToken) {
        await AsyncStorage.setItem('accessToken', response.data.accessToken);
        await AsyncStorage.setItem('refreshToken', response.data.refreshToken);
        await AsyncStorage.setItem('userId', response.data.userId);
        await AsyncStorage.setItem('username', response.data.username);
        await AsyncStorage.setItem('userType', 'resident');
      }
      
      return response.data;
    } catch (error) {
      // Kh√¥ng x·ª≠ l√Ω l·ªói ·ªü ƒë√¢y, m√† ƒë·ªÉ component x·ª≠ l√Ω
      throw error;
    }
  },
  
  async loginStaff(payload: StaffLoginPayload): Promise<LoginResponse | null> {
    try {
      const response = await instance.post<LoginResponse>(VITE_LOGIN_STAFF, payload);
      
      // L∆∞u token v√†o AsyncStorage
      if (response.data.accessToken) {
        await AsyncStorage.setItem('accessToken', response.data.accessToken);
        await AsyncStorage.setItem('refreshToken', response.data.refreshToken);
        await AsyncStorage.setItem('userId', response.data.userId);
        await AsyncStorage.setItem('username', response.data.username);
        await AsyncStorage.setItem('userType', 'staff');
      }
      
      return response.data;
    } catch (error) {
      // Kh√¥ng x·ª≠ l√Ω l·ªói ·ªü ƒë√¢y, m√† ƒë·ªÉ component x·ª≠ l√Ω
      throw error;
    }
  },
  
  async getCurrentUser(): Promise<any> {
    try {
      // Log token ƒë·ªÉ ki·ªÉm tra
      const token = await AsyncStorage.getItem('accessToken');
      console.log('üîê Current User Token:', token ? 'EXISTS' : 'NOT FOUND');

      const response = await instance.get(VITE_CURRENT_USER_API);
      return response.data;
    } catch (error: any) {
      console.error('‚ùå Get Current User Error:', {
        status: error.response?.status,
        data: error.response?.data,
        message: error.message
      });
      throw error;
    }
  },
  
  async logout(): Promise<void> {
    try {
      console.log('üö™ Logging out...');
      
      // Log c√°c key tr∆∞·ªõc khi x√≥a
      const allKeys = await AsyncStorage.getAllKeys();
      console.log('üîë All Storage Keys before logout:', allKeys);

      // X√≥a t·∫•t c·∫£ th√¥ng tin li√™n quan ƒë·∫øn ng∆∞·ªùi d√πng
      await AsyncStorage.multiRemove([
        'accessToken', 
        'refreshToken', 
        'userId', 
        'username', 
        'userData',
        'userType'  // Add userType to the list of keys to remove
      ]);

      // Log c√°c key sau khi x√≥a
      const remainingKeys = await AsyncStorage.getAllKeys();
      console.log('üîë Remaining Storage Keys after logout:', remainingKeys);

      // N·∫øu s·ª≠ d·ª•ng axios instance, h√£y clear headers
      if (instance.defaults.headers) {
        delete instance.defaults.headers.common['Authorization'];
        console.log('üîí Authorization header cleared');
      }

      console.log('‚úÖ Logout successful');
    } catch (error) {
      console.error("‚ùå L·ªói ƒëƒÉng xu·∫•t:", error);
    }
  },

  // Ph∆∞∆°ng th·ª©c l·∫•y danh s√°ch v·ªã tr√≠ l√†m vi·ªác
  async getWorkingPositions(): Promise<WorkingPositionResponse> {
    try {
      const response = await instance.get<WorkingPositionResponse>(VITE_POSITION_STAFF);
      return response.data;
    } catch (error) {
      console.error('Error fetching working positions:', error);
      throw error;
    }
  },

  // Ph∆∞∆°ng th·ª©c l·∫•y danh s√°ch ph√≤ng ban
  async getDepartments(): Promise<DepartmentResponse> {
    try {
      const response = await instance.get<DepartmentResponse>(VITE_DEPARTMENT_STAFF);
      return response.data;
    } catch (error) {
      console.error('Error fetching departments:', error);
      throw error;
    }
  },

  // Ph∆∞∆°ng th·ª©c l·∫•y th√¥ng tin chi ti·∫øt nh√¢n vi√™n
  async getStaffDetails(staffId: string): Promise<StaffDetailsResponse> {
    try {
      const url = VITE_GET_STAFF_INFORMATION.replace('{staffId}', staffId);
      const response = await instance.get<StaffDetailsResponse>(url);
      return response.data;
    } catch (error) {
      console.error('Error fetching staff details:', error);
      throw error;
    }
  }
};

// Function ƒë·ªÉ ki·ªÉm tra token hi·ªán t·∫°i
export const validateToken = async () => {
  try {
    const token = await AsyncStorage.getItem('accessToken');
    if (!token) {
      return false;
    }
    
    const response = await instance.get(VITE_CURRENT_USER_API);
    return response.status === 200;
  } catch (error) {
    console.error('Token validation error:', error);
    return false;
  }
};

// Chatbot service
export const sendChatMessage = async (message: string) => {
  try {
    const userId = await AsyncStorage.getItem('userId');
    const response = await axios.post(
      `${VITE_API_SECRET}${VITE_POST_CHATBOT.replace('{userId}', userId || '')}`,
      { message }
    );
    return response.data;
  } catch (error) {
    console.error('Error sending message:', error);
    throw error;
  }
};

export const getChatHistory = async (userId: string) => {
  try {
    const response = await axios.get(
      `${VITE_API_SECRET}${VITE_GET_CHATBOT.replace('{userId}', userId)}`
    );
    
    // API tr·∫£ v·ªÅ c·∫•u tr√∫c { data: [...], meta: {...} }
    return response.data;
  } catch (error) {
    console.error('Error getting chat history:', error);
    throw error;
  }
};

// L·∫•y l·ªãch s·ª≠ b√°o c√°o v·∫øt n·ª©t c·ªßa ng∆∞·ªùi d√πng
export const getUserCrackReports = async (userId: string) => {
  try {
    const response = await instance.get(
      `${VITE_GET_HISTORY_CRACK.replace('{userId}', userId)}`
    );
    return response.data;
  } catch (error) {
    console.error('Error getting user crack reports:', error);
    throw error;
  }
};

export default instance;
