import AsyncStorage from '@react-native-async-storage/async-storage';
import { Apartment } from '../types';
import { VITE_GET_RESIDENT_PROPERTY, VITE_API_SECRET, VITE_GET_DETAIL_RESIDENT_PROPERTY } from '@env';
import instance from './Auth';
import { PropertyDetailResponse, PropertyDetail } from '../types';

export const PropertyService = {
  async getCurrentUserProperties(): Promise<Apartment[]> {
    try {
      // L·∫•y userId t·ª´ AsyncStorage
      const userId = await AsyncStorage.getItem('userId');
      
      console.log('üîç UserID:', userId);
      console.log('üåê Base API:', VITE_API_SECRET);
      console.log('üè† Property Endpoint Template:', VITE_GET_RESIDENT_PROPERTY);

      if (!userId) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y userId');
        return [];
      }

      // Thay th·∫ø {id} b·∫±ng userId th·ª±c t·∫ø
      const endpoint = VITE_GET_RESIDENT_PROPERTY.replace('{id}', userId);
      const fullUrl = `${VITE_API_SECRET}${endpoint}`;

      console.log('üåê Full API URL:', fullUrl);
      console.log('üåê Actual Endpoint:', endpoint);

      // G·ªçi API l·∫•y danh s√°ch thu·ªôc t√≠nh
      try {
        const response = await instance.get(endpoint, {
          baseURL: VITE_API_SECRET
        });
        
        console.log('üè† Response Status:', response.status);
        console.log('üè† Response Headers:', response.headers);
        console.log('üè† Danh s√°ch apartments:', response.data);
        
        return response.data.data || [];
      } catch (apiError: any) {
        console.error('‚ùå Chi ti·∫øt l·ªói API:', {
          status: apiError.response?.status,
          data: apiError.response?.data,
          message: apiError.message,
          config: apiError.config
        });

        return [];
      }
    } catch (error) {
      console.error('‚ùå L·ªói t·ªïng:', error);
      return [];
    }
  },

  async getPropertyDetail(apartmentId: string): Promise<PropertyDetail | null> {
    try {
      // L·∫•y userId t·ª´ AsyncStorage
      const userId = await AsyncStorage.getItem('userId');
      
      if (!userId) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y userId');
        return null;
      }

      // Thay th·∫ø {id} v√† {apartmentId} b·∫±ng userId v√† apartmentId th·ª±c t·∫ø
      const endpoint = VITE_GET_DETAIL_RESIDENT_PROPERTY
        .replace('{id}', userId)
        .replace('{apartmentId}', apartmentId);
      
      console.log('üåê Property Detail Endpoint:', endpoint);

      try {
        const response = await instance.get<PropertyDetailResponse>(endpoint, {
          baseURL: VITE_API_SECRET
        });
        
        console.log('üè† Property Detail Response:', response.data);
        
        if (response.data.isSuccess && response.data.data) {
          const { data } = response.data;
          return {
            apartmentId: data.apartmentId,
            building: data.building.name,
            buildingName: data.building.name,
            description:data.building.description,
            unit: data.apartmentName,
            numberFloor: data.building.numberFloor, // You might want to add this to the API response
            status: '', // You might want to add this to the API response
            type: undefined,
            area: undefined,
            owner: undefined,
            registrationDate: undefined,
          };
        }

        return null;
      } catch (apiError: any) {
        console.error('‚ùå Chi ti·∫øt l·ªói API:', {
          status: apiError.response?.status,
          data: apiError.response?.data,
          message: apiError.message,
          config: apiError.config
        });

        return null;
      }
    } catch (error) {
      console.error('‚ùå L·ªói t·ªïng:', error);
      return null;
    }
  }
};